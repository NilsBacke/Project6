#!/usr/bin/env python3

import sys, socket, select, time, json, random

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
sock.connect(my_id)

last = 0
lastHeartbeat = 0

SELECT_WAIT_TIME = 0.01 # 10 milliseconds
TERMINATOR = b'}\n'
buffer = b''

HEARTBEAT_INTERVAL = 0.100 # 150ms
election_timeout = random.randint(500, 800) / 1000 # 500-800ms

# Server state variables
role = 'follower'
state = {}
currentTerm = 0
votedFor = None
log = [] # list of dictionaries, [{ term, key, value, index }]
commitIndex = -1 # -1 because log is 0 indexed
lastApplied = -1

# only relevant for leaders
nextIndex = {}
matchIndex = {}

numReceivedVotes = 0
numReceivedAcceptAppends = {} # MID to num
leaderId = 'FFFF'

MAX_TIME_AWAITING_PUT_QUORUM = 0.3 # 300ms
timeAwaitingPutQuorum = {} # dictionary mapping MID to { 'time': 0, 'msgs': {}, 'times': 0 }

# Receive 
def recv_msgs(sock):
	global buffer

	fresh_buf = sock.recv(16384)

	# is this sock shutting down?
	if len(fresh_buf) == 0:
			return None

	buffer += fresh_buf	

	msgs = []
	while TERMINATOR in buffer:
		position = buffer.find(TERMINATOR) + len(TERMINATOR)
		msgs.append(json.loads(buffer[:position - 1].decode()))  # -1 to remove the \n, which json.loads won't want
		buffer = buffer[position:]

	return msgs

time.sleep(0.5)
while True:
	clock = time.time()
	ready = select.select([sock], [], [], SELECT_WAIT_TIME)[0]
	
	if sock in ready:
		msgs = recv_msgs(sock)

		for msg in msgs:
			if msg['type'] in ['get', 'put']:
				if role != 'leader':
					send_msg = {'src': my_id, 'dst': msg['src'], 'leader': leaderId, 'type': 'redirect', 'MID': msg['MID']}
					sock.send(json.dumps(send_msg).encode() + b'\n')
				elif role == 'leader':
					if msg['type'] == 'get':
						val = ''
						if msg['key'] in state:
							val = state[msg['key']]
						print('get', msg['key'], val)
						send_msg = {'src': my_id, 'dst': msg['src'], 'leader': leaderId, 'type': 'ok', 'MID': msg['MID'], 'value': val }
						sock.send(json.dumps(send_msg).encode() + b'\n')
					elif msg['type'] == 'put':
						log.append({ 'type': 'put', 'key': msg['key'], 'value': msg['value'], 'term': currentTerm, 'MID': msg['MID'], 'clientId': msg['src'], 'index': len(log) })
						messages_to_be_sent = []
						for rep_id in replica_ids:
							next_index = nextIndex[rep_id]
							entries = log[next_index:]
							prevLogIndex = next_index - 1
							prevLogTerm = -1
							if prevLogIndex != -1:
								prevLogTerm = log[prevLogIndex]['term'] if prevLogIndex < len(log) else log[-1]['term']

							send_msg = { 'src': my_id, 'dst': rep_id, 'leader': my_id, 'type': 'AppendEntriesRPC', 'term': currentTerm, 'prevLogIndex': prevLogIndex, 'prevLogTerm': prevLogTerm, 'entries': entries, 'leaderCommit': commitIndex, 'MID': msg['MID'], 'clientId': msg['src'], 'nextIndex': next_index }
							messages_to_be_sent.append(send_msg)

						lastHeartbeat = clock
						timeAwaitingPutQuorum[msg['MID']] = { 'time': clock, 'msgs': messages_to_be_sent, 'times': 0 }
						for send_msg in messages_to_be_sent:
							sock.send(json.dumps(send_msg).encode() + b'\n')
			
			# AppendEntriesRPC
			if msg['type'] == 'AppendEntriesRPC':
				role = 'follower'
				numReceivedVotes = 0
				votedFor = None

				# handle heartbeat
				if 'MID' not in msg:
					last = clock

				leaderId = msg['leader']

				if msg['term'] > currentTerm:
					currentTerm = msg['term']

				success = False
				if msg['term'] == currentTerm:
					# 1 of Receiver implementation
					if msg['term'] < currentTerm:
						success = False

					# 2 of Receiver implementation
					if msg['prevLogIndex'] != -1 and msg['prevLogIndex'] < len(log) and log[msg['prevLogIndex']]['term'] == msg['prevLogTerm']:
						success = True
					if msg['prevLogIndex'] == -1:
						success = True
					
					if success:
						last = clock

					# 3 of Receiver implementation
					entriesIndex = 0
					for index in range(msg['prevLogIndex'] + 1, len(log)):
						if entriesIndex < len(msg['entries']):
							if log[index]['term'] != msg['entries'][entriesIndex]['term']:
								log = log[0:index]
								break
							entriesIndex += 1
						else:
							break

					# 4 of Receiver implementation
					if entriesIndex < len(msg['entries']):
						log.extend(msg['entries'][entriesIndex:])

					# 5 of Receiver implementation
					if msg['leaderCommit'] > commitIndex:
						commitIndex = min(msg['leaderCommit'], len(log) - 1)

						for i in range(lastApplied + 1, commitIndex + 1):
							state[log[i]['key']] = log[i]['value']
							lastApplied = i

					if 'MID' in msg:
						print('append entries', my_id, msg['leaderCommit'], commitIndex, lastApplied, currentTerm, success)
				else:
					print('wrong term', my_id, currentTerm, msg['term'])

				if 'MID' in msg:
					send_msg = { 'src': my_id, 'dst': leaderId, 'leader': leaderId, 'type': 'AppendEntriesRPCResponse', 'term': currentTerm, 'success': success, 'MID': msg['MID'], 'clientId': msg['clientId'], 'entries': msg['entries'], 'nextIndex': msg['nextIndex'], 'prevLogIndex': msg['prevLogIndex'], 'prevLogTerm': msg['prevLogTerm'] }
					sock.send(json.dumps(send_msg).encode() + b'\n')

			# AppendEntriesRPCResponse
			if role == 'leader' and msg['type'] == 'AppendEntriesRPCResponse':
				if msg['term'] > currentTerm:
					currentTerm = msg['term']
					role = 'follower'
					votedFor = -1
				else:
					success = msg['success']

					if success:
						nextIndex[msg['src']] = msg['nextIndex'] + len(msg['entries'])
						matchIndex[msg['src']] = nextIndex[msg['src']] - 1

						if msg['MID'] in numReceivedAcceptAppends:
							numReceivedAcceptAppends[msg['MID']] += 1
						else:
							numReceivedAcceptAppends[msg['MID']] = 1

						if msg['MID'] in timeAwaitingPutQuorum:
							new_msgs = []
							for m in timeAwaitingPutQuorum[msg['MID']]['msgs']:
								if m['dst'] != msg['src']:
									new_msgs.append(m)
							timeAwaitingPutQuorum[msg['MID']]['msgs'] = new_msgs

						commitIndexCounter = commitIndex + 1
						commitIndexChanged = False
						while commitIndexCounter < len(log):
							if log[commitIndexCounter]['term'] == currentTerm:
								matches = 1
								for rep_id in replica_ids:
									if matchIndex[rep_id] >= commitIndexCounter:
										matches += 1
								
								if matches > len(replica_ids) / 2:
									commitIndex = commitIndexCounter
									commitIndexChanged = True
									if log[commitIndexCounter]['MID'] in timeAwaitingPutQuorum:
										del timeAwaitingPutQuorum[log[commitIndexCounter]['MID']]
							commitIndexCounter += 1

						if commitIndexChanged and commitIndex > lastApplied:
							for i in range(lastApplied + 1, commitIndex + 1):
								state[log[i]['key']] = log[i]['value']
								print('applied', my_id, log[i]['key'], log[i]['value'], log[i]['index'])
								send_msg = {'src': my_id, 'dst': log[i]['clientId'], 'leader': leaderId, 'type': 'ok', 'MID': log[i]['MID'] }

								sock.send(json.dumps(send_msg).encode() + b'\n')
								lastApplied = i
					else:
						# decrement and retry
						if msg['MID'] in timeAwaitingPutQuorum:
							timeAwaitingPutQuorum[msg['MID']]['time'] = clock

						nextIndex[msg['src']] = msg['nextIndex'] - 1

						next_index = nextIndex[msg['src']]
						prevLogIndex = next_index - 1
						prevLogTerm = -1
						if prevLogIndex != -1:
							prevLogTerm = log[prevLogIndex]['term'] if prevLogIndex < len(log) else log[-1]['term']
						send_msg = {'src': my_id, 'dst': msg['src'], 'leader': my_id, 'type': 'AppendEntriesRPC', 'term': currentTerm, 'prevLogIndex': prevLogIndex, 'prevLogTerm': prevLogTerm, 'entries': msg['entries'], 'leaderCommit': commitIndex, 'MID': msg['MID'], 'clientId': msg['src'], 'nextIndex': next_index }
						sock.send(json.dumps(send_msg).encode() + b'\n')

			# RequestVoteRPC
			if msg['type'] == 'RequestVoteRPC':
				role = 'candidate'
				leaderId = 'FFFF'

				if msg['term'] > currentTerm:
					currentTerm = msg['term']
					role = 'follower'
					votedFor = None

				grant_vote = msg['term'] >= currentTerm and (votedFor in [None, msg['candidateId']]) and (msg['lastLogIndex'] >= len(log) - 1) and (msg['lastLogTerm'] >= (log[-1]['term'] if len(log) > 0 else 0))

				if grant_vote:
					votedFor = msg['candidateId']
					last = clock

				send_msg = {'src': my_id, 'dst': msg['src'], 'leader': 'FFFF', 'type': 'RequestVoteRPCResponse', 'term': currentTerm, 'voteGranted': grant_vote }
				sock.send(json.dumps(send_msg).encode() + b'\n')
			
			# RequestVoteRPCResponse
			if msg['type'] == 'RequestVoteRPCResponse' and role == 'candidate':
				if msg['term'] > currentTerm:
					currentTerm = msg['term']
					role = 'follower'
					votedFor = None
				else:
					if msg['term'] == currentTerm and msg['voteGranted']:
						numReceivedVotes += 1
					# numReceivedVotes should already be 1 for the replica that triggered the election
					# become leader
					if numReceivedVotes > len(replica_ids) / 2: 
						print('leader', my_id, state.keys())
						role = 'leader'
						leaderId = my_id
						numReceivedVotes = 0 # reset
						for rep_id in replica_ids:
							nextIndex[rep_id] = len(log)
							matchIndex[rep_id] = -1 # -1 because log is 0 indexed

							next_index = nextIndex[rep_id]
							prevLogIndex = next_index - 1
							prevLogTerm = -1
							if prevLogIndex != -1:
								prevLogTerm = log[prevLogIndex]['term'] if prevLogIndex < len(log) else log[-1]['term']
							msg = { 'src': my_id, 'dst': rep_id, 'leader': my_id, 'type': 'AppendEntriesRPC', 'term': currentTerm, 'prevLogIndex': prevLogIndex, 'prevLogTerm': prevLogTerm, 'entries': [], 'leaderCommit': commitIndex }
							sock.send(json.dumps(msg).encode() + b'\n')
						lastHeartbeat = clock
		
	if role != 'leader' and clock - last > election_timeout:
		# Hit election timeout, send RequestVoteRPC to all other servers
		print('trigger election', my_id)
		role = 'candidate'
		currentTerm += 1
		votedFor = my_id
		numReceivedVotes = 1
		leaderId = 'FFFF'
		msg = {'src': my_id, 'dst': 'FFFF', 'leader': 'FFFF', 'type': 'RequestVoteRPC', 'term': currentTerm, 'candidateId': my_id, 'lastLogIndex': len(log) - 1, 'lastLogTerm': (log[-1]['term'] if len(log) > 0 else 0)
		}
		# Make sure to end all messages with \n
		sock.send(json.dumps(msg).encode() + b'\n')
		last = clock
	
	if role == 'leader' and clock - lastHeartbeat >= HEARTBEAT_INTERVAL:
		# send heartbeat message
		for rep_id in replica_ids:
			next_index = nextIndex[rep_id]
			prevLogIndex = next_index - 1
			prevLogTerm = -1
			if prevLogIndex != -1:
				prevLogTerm = log[prevLogIndex]['term'] if prevLogIndex < len(log) else log[-1]['term']

			msg = {'src': my_id, 'dst': rep_id, 'leader': my_id, 'type': 'AppendEntriesRPC', 'term': currentTerm, 'prevLogIndex': prevLogIndex, 'prevLogTerm': prevLogTerm, 'entries': [], 'leaderCommit': commitIndex }
			sock.send(json.dumps(msg).encode() + b'\n')
		lastHeartbeat = clock
	
	for key, val in timeAwaitingPutQuorum.items():
		if val['times'] == 4:
			if role == 'leader':
				print('trigger election special', my_id)
				role = 'candidate'
				currentTerm += 1
				votedFor = my_id
				numReceivedVotes = 1
				leaderId = 'FFFF'
				msg = {'src': my_id, 'dst': 'FFFF', 'leader': 'FFFF', 'type': 'RequestVoteRPC', 'term': currentTerm, 'candidateId': my_id, 'lastLogIndex': len(log) - 1, 'lastLogTerm': (log[-1]['term'] if len(log) > 0 else 0)
				}
				# Make sure to end all messages with \n
				sock.send(json.dumps(msg).encode() + b'\n')
				last = clock
				timeAwaitingPutQuorum[key]['times'] = val['times'] + 1
		elif clock - val['time'] >= MAX_TIME_AWAITING_PUT_QUORUM and val['times'] < 4 and len(val['msgs']) > 0:
			print('sending retry', val['msgs'][0]['entries'][-1]['key'], val['msgs'][0]['entries'][-1]['index'], list(map(lambda x: x['dst'], val['msgs'])))
			# for msg in val['msgs']:
			# 	msg['leader'] = leaderId
			# 	sock.send(json.dumps(msg).encode() + b'\n')
			# timeAwaitingPutQuorum[key]['time'] = clock
			# timeAwaitingPutQuorum[key]['times'] = val['times'] + 1
			send_msg = { 'src': my_id, 'dst': val['msgs'][0]['entries'][-1]['clientId'], 'leader': leaderId, 'type': 'fail', 'MID': val['msgs'][0]['entries'][-1]['MID'] }
			sock.send(json.dumps(msg).encode() + b'\n')
